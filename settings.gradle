pluginManagement {
    repositories {
        mavenLocal()
        gradlePluginPortal()
        maven { url = 'https://maven.neoforged.net/releases' }
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = "https://maven.architectury.dev/" }
        maven { url = "https://maven.quiltmc.org/repository/release" }
        gradlePluginPortal()
    }
}

plugins {
    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.8.0'
}


dependencyResolutionManagement {
    repositories {
        mavenCentral()
    }
    versionCatalogs {
        // Minecraft Version
        def minecraftVersion = "1.21"

        // Mod Dependencies Versions
        // Forge
        def jeiVersion = "19.0.0.1"
        def reiVersion = "16.0.729"
        def emiVersion = "1.1.7"
        def neoVersion = "21.0.0-beta"
//        def registrateForgeVersion = "MC1.20-1.3.3"
//        def createForgeVersion = "0.5.1.f-26"
//        def flywheelForgeVersion = "0.6.10-7"
        def jadeForgeVersion = "5366595"
//        def botarium_version = "2.3.3"
//        def ad_astra_version = "1.15.18"
        def resourcefullib_version = "3.0.1"
        def resourcefulconfig_version = "3.0.0\n"
        def gtmVersion = "1.2.0"
        def ldLibVersion = "1.0.25.r"
        def shimmerVersion = "0.2.4"

        // Libs
        def quiltMappingsVersion = "5"  // https://lambdaurora.dev/tools/import_quilt.html
        def parchmentVersion = "2023.09.03" // https://parchmentmc.org/docs/getting-started
        def shadowVersion = "7.1.2"
        def architecturyPluginVersion = "3.4-SNAPSHOT"
        def architecturyLoomVersion = "1.6-SNAPSHOT"
        def vineFlowerVersion = "1.11.0"
        def macheteVersion = "1.+"
        def configurationVersion = "2.2.0"
        def mixinextrasVersion = "0.3.5"
        def kotlinJemVersion = "1.8.22"
        def kotlinPluginVersion = "1.8.22"

        neoforge {
            version("forgeShortVersion", neoVersion)
            def minecraftForge = version("minecratfForge", "${minecraftVersion}-${neoVersion}")
            library("minecraftForge", "net.minecraftforge", "forge").versionRef(minecraftForge)

            def ldLib = version("ldlib", ldLibVersion)
            library("ldlib-neoforge", "com.lowdragmc.ldlib", "ldlib-neoforge-${minecraftVersion}").versionRef(ldLib)

            def shimmer = version("shimmer", "${minecraftVersion}-${shimmerVersion}")
            library("shimmer-forge", "com.lowdragmc.shimmer", "Shimmer-forge").versionRef(shimmer)

//            def registrate = version("registrate", registrateForgeVersion)
//            library("registrate", "com.tterrag.registrate", "Registrate").versionRef(registrate)

//            def createForge = version("createForge", createForgeVersion)
//            library("createForge", "com.simibubi.create", "create-${minecraftVersion}").versionRef(createForge)

//            def flywheel = version("flywheel", flywheelForgeVersion)
//            library("flywheel", "com.jozufozu.flywheel", "flywheel-forge-${minecraftVersion}").versionRef(flywheel)

            def jei = version("jei", jeiVersion)
            library("jei-common-api", "mezz.jei", "jei-${minecraftVersion}-common-api").versionRef(jei)
            library("jei-neoforge-api", "mezz.jei", "jei-${minecraftVersion}-neoforge-api").versionRef(jei)
            library("jei-neoforge-impl", "mezz.jei", "jei-${minecraftVersion}-neoforge").versionRef(jei)

            def rei = version("rei", reiVersion)
            library("rei-plugin", "me.shedaniel", "RoughlyEnoughItems-default-plugin-neoforge").versionRef(rei)
            library("rei-api", "me.shedaniel", "RoughlyEnoughItems-api-neoforge").versionRef(rei)
            library("rei-neoforge", "me.shedaniel", "RoughlyEnoughItems-neoforge").versionRef(rei)

            def emi = version("emi", emiVersion + "+" + minecraftVersion)
            library("emi", "dev.emi", "emi-neoforge").versionRef(emi)

            def jade = version("jade", jadeForgeVersion)
            library("jade", "curse.maven", "jade-324717").versionRef(jade)

            def configuration = version("configuration", configurationVersion)
            library("configuration", "dev.toma.configuration", "configuration-forge-1.20.1").versionRef(configuration)

//            def ad_astra = version("ad_astra", ad_astra_version)
//            library("ad_astra", "earth.terrarium.adastra", "ad_astra-forge-1.20.1").versionRef(ad_astra)

//            def botarium = version("botarium", botarium_version)
//            library("botarium", "earth.terrarium.botarium", "botarium-forge-${minecraftVersion}").versionRef(botarium)

            def resourcefullib = version("resourcefullib", resourcefullib_version)
            library("resourcefullib", "com.teamresourceful.resourcefullib", "resourcefullib-forge-${minecraftVersion}").versionRef(resourcefullib)

            def resourcefulconfig = version("resourcefulconfig", resourcefulconfig_version)
            library("resourcefulconfig", "com.teamresourceful.resourcefulconfig", "resourcefulconfig-forge-${minecraftVersion}").versionRef(resourcefulconfig)

            def gtm = version("gtm", gtmVersion)
            library("gtm", "com.gregtechceu.gtceu", "gtceu-${minecraftVersion}").versionRef(gtm)
        }

        libs {
            version("quiltMappings", quiltMappingsVersion)
            version("parchment", parchmentVersion)

            def minecraft = version("minecraft", minecraftVersion)
            library("minecraft", "com.mojang", "minecraft").versionRef(minecraft)

            def shadow = version("shadow", shadowVersion)
            plugin("shadow", "com.github.johnrengelman.shadow").versionRef(shadow)

            def architecturyPlugin = version("architectury", architecturyPluginVersion)
            plugin("architectury", "architectury-plugin").versionRef(architecturyPlugin)

            def architecturyLoom = version("architectury-loom", architecturyLoomVersion)
            plugin("architectury-loom", "dev.architectury.loom").versionRef(architecturyLoom)

            def vineFlower = version("vineFlower", vineFlowerVersion)
            plugin("vineFlower", "io.github.juuxel.loom-vineflower").versionRef(vineFlower)

            def machete = version("machete", macheteVersion)
            plugin("machete", "io.github.p03w.machete").versionRef(machete)

            def kotlinJvm = version("kotlin", kotlinJemVersion)
            plugin("kotlin-jvm", "org.jetbrains.kotlin.jvm").versionRef(kotlinJvm)

            def kotlinPlugin = version("kotlin-plugin", kotlinPluginVersion)
            plugin("kotlin-plugin", "org.jetbrains.kotlin.plugin.serialization").versionRef(kotlinPlugin)
        }
    }
}

rootProject.name = 'extrasounds'
